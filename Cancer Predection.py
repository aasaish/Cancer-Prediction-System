# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/188o2qtOrecjeKqEREhWSOzoB33TgKDPF
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load the data
df = pd.read_csv('The_Cancer_data_1500_V2.csv')

# Time series analysis
df['Diagnosis'] = df['Diagnosis'].astype(int)
df['Date'] = pd.to_datetime('2024-06-21')
df = df.set_index('Date')

# Exploratory data analysis
print(df.head())
print(df.info())
print(df.describe())

# Handling missing values
print(df.isnull().sum())
df = df.dropna()

# Feature engineering
df['BMI_Category'] = pd.cut(df['BMI'], bins=[-1, 18.5, 25, 30, np.inf], labels=['Underweight', 'Normal', 'Overweight', 'Obese'])
df['Smoking_Status'] = df['Smoking'].apply(lambda x: 'Smoker' if x == 1 else 'Non-smoker')
df['Physical_Activity_Level'] = pd.cut(df['PhysicalActivity'], bins=[-1, 3, 6, 9, 12], labels=['Low', 'Moderate', 'High', 'Very High'])
df['Alcohol_Intake_Level'] = pd.cut(df['AlcoholIntake'], bins=[-1, 1, 3, 6, np.inf], labels=['Low', 'Moderate', 'High', 'Very High'])

# Feature selection
X = df[['Gender', 'BMI', 'Smoking', 'GeneticRisk', 'PhysicalActivity', 'AlcoholIntake', 'CancerHistory']]
y = df['Diagnosis']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Model evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Classification report
print('Classification Report:\n', classification_report(y_test, y_pred))

# Feature importance
feature_importances = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)
plt.figure(figsize=(10, 6))
feature_importances.plot(kind='bar')
plt.title('Feature Importances')
plt.xlabel('Feature')
plt.ylabel('Importance')
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(X_train.iloc[:, 0], X_train.iloc[:, 1], c=y_train, cmap='viridis')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Scatter Plot of Features')
plt.colorbar()
plt.show()

# Prompt the user for input
age = int(input("Enter your age (range: 21 to 80): "))
gender = int(input("Enter your gender (0 for female, 1 for male): "))
bmi = float(input("Enter your BMI (range: 16.1 to 38.8): "))
smoking = int(input("Are you a smoker? (0 for no, 1 for yes): "))
genetic_risk = int(input("Enter your genetic risk level (0, 1, or 2): "))
physical_activity = float(input("Enter your physical activity level (range: 1.1 to 9.5): "))
alcohol_intake = float(input("Enter your alcohol intake level (range: 0.1 to 4.7): "))
cancer_history = int(input("Do you have a history of cancer? (0 for no, 1 for yes): "))
# Make a prediction
# Remove one of the features from new_patient to match the number of features the model was trained on.
# For example, if 'cancer_history' was not used in training, remove it:
new_patient = [age, gender, bmi, smoking, genetic_risk, physical_activity, alcohol_intake]
prediction = model.predict([new_patient])

print(f"Prediction: {'Cancer' if prediction[0] == 1 else 'No Cancer'}")